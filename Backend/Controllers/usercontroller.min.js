import User from '../Models/user.model.min.js'
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer'

dotenv.config();

const userContoller = {
    signup: async (req, res) => {
        try {
            // get the user inputs

            const { username, password, name, location } = req.body;
            const user = await User.findOne({ username });
            //Checking if the user exists
            if (user) {
                return res.status(400).json({ message: "Username already found" })
            }
            //Hashing the password
            const passwordHash = await bcrypt.hash(password, 10);
            // Create a new password
            const newUser = new User({
                username, passwordHash, name, location
            });
            const savedUser = await newUser.save()
            res.json({
                message: "User created successfully", user: {
                    username: savedUser.username, name: savedUser.name, location: savedUser.location, role: savedUser.role
                }
            })
        } catch (error) {
            res.status(400).json({ message: "Error creating a user" })
        }

    },
    signin: async (req, res) => {
        try {
            // Get the data from the user
            const { username, password } = req.body;

            const user = await User.findOne({ username });
            // Check the user available in the database
            if (!user) {
                return res.status(400).json({ message: "User not found" })
            }
            // Checking for password match
            const passwordMatch = await bcrypt.compare(password, user.passwordHash)

            if (!passwordMatch) {
                return res.status(401).json({ message: "Password is not right Check again" })
            }
            // generate a token as they login
            const token = jwt.sign({
                username: user.username,
                id: user._id,
                name: user.name
            }, process.env.JWT_secret)
            res.cookie('token', token, {
                httpOnly: true,
                sameSite: 'strict',
                expires: new Date(Date.now() + 24 * 60 * 60 * 1000),
                secure: true,
            })
            res.json({ message: "Logged in Successfully", token })


        } catch (error) {
            res.status(500).json({ message: 'Server Error' })
        }
    },
    getUser: async (req, res) => {
        try {
            // getting the username
            const { username } = req.body;
            // Check the user available in the database

            const user = await User.findOne({username});
            if (!user) {
                return res.status(400).json({ message: "No such user exists" })
            }
            res.status(200).json({ user, message: "User found" })
        } catch (error) {
            console.log(error);
        }
    },
    forgotPassword: async (req, res, next) => {
        try {
            // getting the username

            const { username } = req.body;
            const user = await User.findOne({ username })
            // const token = await User.findOne({token})

            if (!user) {
                return res.status(400).json({ message: "No such user exists" })
            }
            else {
                // generate a random string

                const token = crypto.randomUUID(32).toString('hex')
              // save the random string in database
                user.token = token;
                await user.save()
                // Nodemailer
                const transporter = nodemailer.createTransport({
                    service: 'gmail',
                    auth: {
                        user: 'kamaleshwaranvlup@gmail.com',
                        pass: process.env.PASSWORD
                    }
                });

                // Email parameters
                const option = {
                    from: 'kamaleshwaranvlup@gmail.com',
                    to: username,
                    subject: 'Passwordreset',
                    text: `Your Url for resetting the password, 
                    ${process.env.baseurl}resetpassword/${user._id}/${token}`
                };

                // Sending the mail
                transporter.sendMail(option, function (error, info) {
                    if (error) {
                        res.status(400).json({ message: "Error sending the mail" })
                    }
                    else {
                        res.status(200).json({ message: 'Email has been sent. Check your inbox. Go to Login page to log back in', info })
                    }
                })
            }

        } catch (error) {
            res.status(500).json({ message: 'Internal Server Error' });
        }
    },
    resetPassword: async (req, res, next) => {
        try {
            // Getting the userId and random string from the url as params
            const { userId, token } = req.params;
            const { password } = req.body;
            // console.log( password);
            // Checking both userId and token to find the user
            const user = await User.findOne({ _id: userId, token })
            console.log(user);
            // const token = await User.findOne({token})
            if (!user) {
                return res.status(400).json({ message: "No such user exists" })
            }

            // If userId and token matched, hash the new  password and update it in the database
            const passwordHash = await bcrypt.hash(password, 10);
            await User.findByIdAndUpdate(user._id, { passwordHash: passwordHash })
            await User.findByIdAndUpdate(user._id, {token: null })

            res.status(200).json({ message: 'Password has been reset successfully. Login again to continue' })

        } catch (error) {
            res.status(500).json({ message: 'Internal Server Error' })
        }
    }

}

export default userContoller;